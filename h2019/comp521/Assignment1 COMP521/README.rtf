{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1\b Prim\'92s algorithm
\f0\b0  was used to generate the game maze. \
The game maze is made random by dynamic generation of cells at runtime. The logic structure of the maze is not hardcoded, thus it is impossible to know the shape before running the game. \
\
The path solving the maze is tracked by 
\f1\b depth first search
\f0\b0 , a typical search algorithm for path finding, in the maze at time 0. At every time n it is possible to move from path cell n-1 to path cell n. \
\
Pre-existing assets were used for graphics rendering and collision detection, as efficient implementations are very complicated to build from the ground up. \
\
The assignment was challenging and an excellent learning experience because I had never used Unity or C# before. }